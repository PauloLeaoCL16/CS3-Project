
import java.awt.*;
import javax.swing.*;
import java.awt.image.*;
import javax.imageio.ImageIO;
import java.io.*;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.*;
import java.lang.System.*;
public class MainMenuPanel extends JPanel implements Runnable, MouseListener, MouseMotionListener {
	private String word;
	private float transparency;
	private int xloc,yloc,fontSize;
	private BufferedImage background;   // The full background (splendorbackground.jpg)
    private BufferedImage splendorImage; // The left side image (weeedwd.jpg)
    private BufferedImage playButton;   // Play button
    private BufferedImage rulesButton;  // Rules button
    private int phase;
    private int theta =0;
    private int playButtonX;
    private int playButtonY;
    private int rulesButtonX;
    private int rulesButtonY;
    private boolean animate =false;
    private Thread animationThread;
    	public MainMenuPanel(boolean bool) {
		phase=0;
		transparency=0.01f;
		word="PAULOLDS PRESENTS";
		xloc=450; yloc=550; fontSize=100;
		   try {
	            // Load images with the correct package path
	            background = ImageIO.read(MainMenuPanel.class.getResource("/splendorImages/splendorbackground.jpg"));
	            splendorImage = ImageIO.read(MainMenuPanel.class.getResource("/splendorImages/weeedwd.jpg"));
	            playButton = ImageIO.read(MainMenuPanel.class.getResource("/splendorImages/playButton.PNG"));
	            rulesButton = ImageIO.read(MainMenuPanel.class.getResource("/splendorImages/rulesButton.PNG"));
	        } catch (IOException e) {
	            e.printStackTrace();
	        } // Add mouse listener so the panel responds to mouse events
	        addMouseListener(this);
	        addMouseMotionListener(this);
	        // Set this panel to be focusable to ensure mouse events work
	        setFocusable(true);
		if(bool) {
			new Thread(new Runnable() {
            @Override
            public void run() {
                animateStart();
                animateStart();// Call the animation method
                phase=1;
                repaint();
            }
			}).start(); 
		}else {
			phase=1;
		}
		
	}
	 public void mouseClicked(MouseEvent e) {
	        int mouseX = e.getX();
	        int mouseY = e.getY();

	        // Calculate Play button bounds
		    if(phase==1) {
	        	int playButtonX = getWidth() * 3 / 4 - playButton.getWidth() / 2;
		        int playButtonY = getHeight() / 2 - playButton.getHeight() / 2;
		        if (mouseX >= playButtonX && mouseX <= playButtonX + playButton.getWidth() &&
		            mouseY >= playButtonY && mouseY <= playButtonY + playButton.getHeight()) {
		            // Play button clicked, go to the game board panel
		            JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
		            topFrame.getContentPane().removeAll();
		            topFrame.add(new GameBoardPanel()); // Transition to the GameBoardPanel
		            topFrame.revalidate();
		            topFrame.repaint();
		        }
	
		        // Calculate Rules button bounds
		        int rulesButtonX = getWidth() * 3 / 4 - rulesButton.getWidth() / 2;
		        int rulesButtonY = playButtonY + playButton.getHeight() + 20;  // Rules button is placed directly below Play button
		        if (mouseX >= rulesButtonX && mouseX <= rulesButtonX + rulesButton.getWidth() &&
		            mouseY >= rulesButtonY && mouseY <= rulesButtonY + rulesButton.getHeight()) {
		            // Rules button clicked, show the rules
		            JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
		            topFrame.getContentPane().removeAll();
		            topFrame.add(new RulesPanel()); // Navigate to RulesPanel
		            topFrame.revalidate();
		            topFrame.repaint();
		        }
		    }
	    }

	  public void mouseReleased(MouseEvent e)
	  {

	  }

	  public void mousePressed(MouseEvent e)
	  {

	  }

	  public void mouseEntered(MouseEvent e) {
		   
		}

	  public void mouseMoved(MouseEvent e) {
		    // Continuously check if the mouse is over the rulesButton
		    int mouseX = e.getX();
		    int mouseY = e.getY();

		    // Stop the animation if the mouse is no longer over the rulesButton
		    boolean isOverRulesButton = (mouseX >= rulesButtonX && mouseX <= rulesButtonX + rulesButton.getWidth() &&
                    mouseY >= rulesButtonY && mouseY <= rulesButtonY + rulesButton.getHeight());

			if (isOverRulesButton && !animate) {
				animate = true;
				new Thread(new Runnable() {
		            @Override
		            public void run() {
		            	animateRules();
		            }
					}).start(); 
			} else if (!isOverRulesButton && animate) {
				animate = false;
				 theta = 0;
			     repaint();
			}
		}
	  public void mouseDragged(MouseEvent e)
	  {
		  
	  }
	  
	  
	  public void mouseExited(MouseEvent e)
	  {
		  
	  }
	  public void animateStart() {
		   while(transparency<0.99) {
				  transparency+=0.01;
				  repaint();
				  try {
		              Thread.sleep(10); 
		          } catch (InterruptedException e) {
		              e.printStackTrace();
		          }
			  }
		   while(transparency>0.01) {
				  transparency-=0.01;
				  repaint();
				  try {
		              Thread.sleep(10); 
		          } catch (InterruptedException e) {
		              e.printStackTrace();
		          }
		    }
		  word="Splendor";
		  transparency = 0.01f;
		  xloc=590;
		  yloc=540;
		  fontSize=200;
	  }
	 public void animateRules() {
		 while (animate) {
             theta = (theta + 2) % 360;
             repaint();
             try {
                 Thread.sleep(10);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
         }

		}
	  public void paint(Graphics g) {
		  Graphics2D g2d = (Graphics2D)g;
		  AlphaComposite alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, transparency);
		  if(phase==0) {
			  g2d.setColor(Color.darkGray);
			  g2d.fillRect(0, 0, 1920, 1080);
			  g2d.setColor(Color.WHITE);
			  g2d.setComposite(alphaComposite);
			  g2d.setFont(new Font("TIMES NEW ROMAN", Font.BOLD, fontSize));
			  g2d.drawString(word,xloc,yloc);
			  
		  }else if(phase==1){
			  g.drawImage(background, 0, 0, getWidth(), getHeight(), null);
	        // Draw the splendorImage (weeedwd.jpg) on the left side (half the width)
			playButtonX = getWidth() * 3 / 4 - playButton.getWidth() / 2;
			playButtonY = getHeight() / 2 - playButton.getHeight() / 2;
			    // Calculate the position of the Rules button, directly below the Play button
		    rulesButtonX = getWidth() * 3 / 4 - rulesButton.getWidth() / 2;
			rulesButtonY = playButtonY + playButton.getHeight() + 20;  // Rules button is placed directly below Play button, 20px gap
	        g.drawImage(splendorImage, 0, 0, getWidth() / 2, getHeight(), null);
	        g.drawImage(playButton, playButtonX, playButtonY, null);

	        // Calculate the position of the Play button
	        g2d.rotate(Math.toRadians(theta), rulesButtonX + rulesButton.getWidth() / 2.0, rulesButtonY + rulesButton.getHeight() / 2.0);
	        g2d.drawImage(rulesButton, rulesButtonX, rulesButtonY, null);
		  }
	  }
}
