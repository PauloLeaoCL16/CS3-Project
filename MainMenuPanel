

import java.awt.*;
import javax.swing.*;
import java.awt.image.*;
import javax.imageio.ImageIO;
import java.io.*;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import static java.lang.System.*;

import java.util.*;

public class MainMenuPanel extends JPanel implements Runnable, MouseListener, MouseMotionListener {
	private ArrayList<Player> playerList;
	private ArrayList<Route> routes;
	private Stack<TrainCard> trainDeck;
	private Stack<TrainCard> discardedTrainDeck;
	private Stack<TicketCard> ticketDeck ;
	private HashMap<String,BufferedImage> images;
	private TreeMap<String, City> cities;
	private GameStage currentState;
	private Player currentPlayer;
	private boolean gameOver;
	private int playerLastTurn;
	private Font mainFont;
	private GameStage currentStage;
    
	public MainMenuPanel(){
		this.addMouseListener(this);
    	this.addMouseMotionListener(this);
		try{
			mainFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getResourceAsStream("gamefont/CinzelDecorative-Regular.otf"));// download the file from github and upload to new package in eclipse name gamefont to use and hopefully wotks- to use basically do something like this in paint g.setFont(mainfont.deriveFont(Font.PLAIN, 68f)); the 68 is the size which will chnage but keep everyhting else the same
		}catch (Exception e ){
			e.printStackTrace();
		}
		out.println("intialized");
		this.setLayout(null);
		initializeMainMenuPanel();
		
	}
	public void initializeMainMenuPanel() {
		playerLastTurn=0;
		currentStage=GameStage.START_SEQUENCE;
		playerList = new ArrayList<Player>();
		routes = new ArrayList<Route>();
		trainDeck = new Stack<TrainCard>() ;
		discardedTrainDeck = new Stack<TrainCard>();
		ticketDeck = new Stack<TicketCard>();
		images = new HashMap<String,BufferedImage>();
		cities = new TreeMap<String, City>() ;
		//currentState = state of game;
		gameOver=false;
		// currentPlayer = player1;
		/*put the images here
		for example  bufferedImage.put(gradient,ImageIO.read(StartPanel.class.getResource("/image/gradient.jpg")));
		
		To add a city do the following  
		City city1 =  new City(String name, int[][] xCoordinate, int[][] yCoordinate);
		City city2 =  new City(String name, int[][] xCoordinate, int[][] yCoordinate);
		
		Route route = new Route(City1,City2,int length,String color,int locomotivesNeeded,boolean isTunnelRoute); connect those two cities
		You can add the coordinates later with addCoordinate();
		
		city1.addAdjacentCity(city2,route);
		city2.addAdjacentCity(city1,route);  set them as adjacent cities
		
		cities.put(city.getName(),City);
		routes.add(route);
		You can put in another method if it takes up too much space 
		
		To add a ticket do the following
		Ticket ticket = new Ticket(boolean isLongRoute,int points, City s, City d);
		*/
		
		repaint();
	}
  public void run() {};
  public void mouseClicked(MouseEvent e) {
  }
  public void mouseReleased(MouseEvent e) { }
  public void mousePressed(MouseEvent e) { }
  public void mouseEntered(MouseEvent e) { }
  public void mouseMoved(MouseEvent e) {
  }
  public void mouseDragged(MouseEvent e) {}
  public void mouseExited(MouseEvent e) {}
  
  
  
  public void paintComponent(Graphics g) {
    super.paintComponent(g);
	  Graphics2D g2d = (Graphics2D)g;
	  out.println("painted");
	  out.println(currentStage+"");
	  if(currentStage==GameStage.START_SEQUENCE) {
		g2d.setColor(Color.BLACK);
	    g2d.fillRect(0, 0, 1850, 1050);
	    out.println("yippee");
	}
  }
  
  public void check() {
	 //check if the deck is exhausted
	 if(trainDeck.isEmpty()) {
		 ArrayList<TrainCard> tempList = new ArrayList<>(discardedTrainDeck);
		 discardedTrainDeck.clear();
		 Collections.shuffle(tempList);
		 for (TrainCard card : tempList) {
		     trainDeck.push(card);
		 }
	 }
	 //check if the game is over
	 if(gameOver=true)
		 playerLastTurn++;
	 if(currentPlayer.getTrainCars()<=2)
		 gameOver=true;
	 if(playerLastTurn==4)
		 add(new EndGamePanel(playerList));
	 else
		 nextPlayer();
  }
  public void nextPlayer() {
	 int index = playerList.indexOf(currentPlayer);
	 int nextPlayerIndex = index+1;
	 if(index==4)
		 nextPlayerIndex=0;
	 currentPlayer = playerList.get(nextPlayerIndex);  
  }
}
