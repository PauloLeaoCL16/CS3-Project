
import java.awt.*;
import javax.swing.*;
import java.awt.image.*;
import javax.imageio.ImageIO;
import java.io.*;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.util.*;
import java.lang.System.*;

public class GameBoardPanel extends JPanel implements MouseListener {

    private BufferedImage background, blackGem, blueGem, redGem, greenGem, whiteGem, reserveGem;
    private BufferedImage tempCard, level1Card, level2Card, level3Card;
    private BufferedImage[] blackCardsLevel1 = new BufferedImage[8];
    private BufferedImage[] blackCardsLevel2 = new BufferedImage[6];
    private BufferedImage[] blackCardsLevel3 = new BufferedImage[4];
    private BufferedImage[] blueCardsLevel1 = new BufferedImage[8];
    private BufferedImage[] blueCardsLevel2 = new BufferedImage[6];
    private BufferedImage[] blueCardsLevel3 = new BufferedImage[4];
    private BufferedImage[] redCardsLevel1 = new BufferedImage[8];
    private BufferedImage[] redCardsLevel2 = new BufferedImage[6];
    private BufferedImage[] redCardsLevel3 = new BufferedImage[4];
    private BufferedImage[] greenCardsLevel1 = new BufferedImage[8];
    private BufferedImage[] greenCardsLevel2 = new BufferedImage[6];
    private BufferedImage[] greenCardsLevel3 = new BufferedImage[4];
    private BufferedImage[] whiteCardsLevel1 = new BufferedImage[8];
    private BufferedImage[] whiteCardsLevel2 = new BufferedImage[6];
    private BufferedImage[] whiteCardsLevel3 = new BufferedImage[4];
    private BufferedImage[] patreons = new BufferedImage[10];

    public GameBoardPanel() {
        loadImages();
    }

    private void loadImages() {

        try {

            // Background
            background = ImageIO.read(getClass().getResource("/splendorImages/creamylol.jpg"));

            // Gems
            blackGem = ImageIO.read(getClass().getResource("/splendorImages/BlackGem.png"));
            blueGem = ImageIO.read(getClass().getResource("/splendorImages/BlueGem.png"));
            redGem = ImageIO.read(getClass().getResource("/splendorImages/RedGem.png"));
            greenGem = ImageIO.read(getClass().getResource("/splendorImages/GreenGem.png"));
            whiteGem = ImageIO.read(getClass().getResource("/splendorImages/WhiteGem.png"));
            reserveGem = ImageIO.read(getClass().getResource("/splendorImages/ReserveGem.png"));

            tempCard = ImageIO.read(getClass().getResource("/splendorImages/creamylol.JPG"));
            
            // Deck levels

            level1Card = ImageIO.read(getClass().getResource("/splendorImages/Level1Card.png"));
            level2Card = ImageIO.read(getClass().getResource("/splendorImages/Level2Card.png"));
            level3Card = ImageIO.read(getClass().getResource("/splendorImages/Level3Card.png"));

            // Cards by color
            // level 1
            for(int i = 1; i<=8 ; i++)
            {
              blackCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/BlackCard"+i+"Level1.png"));
              blueCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/BlueCard"+i+"Level1.png"));
              redCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/RedCard"+i+"Level1.png"));
              greenCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/GreenCard"+i+"Level1.png"));
              whiteCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/WhiteCard"+i+"Level1.png"));
            }
            // level 2
            for(int i = 1; i<=6 ; i++)
            {
              blackCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/BlackCard"+i+"Level2.png"));
              blueCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/BlueCard"+i+"Level2.png"));
              redCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/RedCard"+i+"Level2.png"));
              greenCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/GreenCard"+i+"Level2.png"));
              whiteCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/WhiteCard"+i+"Level2.png"));
            }
            // level 3
            for(int i = 1; i<=4 ; i++)
            {
              blackCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/BlackCard"+i+"Level3.png"));
              blueCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/BlueCard"+i+"Level3.png"));
              redCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/RedCard"+i+"Level3.png"));
              greenCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/GreenCard"+i+"Level3.png"));
              whiteCardsLevel1[i -1] = ImageIO.read(getClass().getResource("/splendorImages/WhiteCard"+i+"Level3.png"));
            }

            // Patreons
            for (int i = 1; i <= 10; i++) {
                patreons[i - 1] = ImageIO.read(getClass().getResource("/splendorImages/Patreon" + i + ".png"));
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error loading images");
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        // Background
        g2d.drawImage(background, 0, 0, getWidth(), getHeight(), this);

        // Draw the vertical black lines separating the sections
        int sectionWidth = getWidth() / 3;
        g2d.setColor(Color.BLACK);
        g2d.drawLine(sectionWidth, 0, sectionWidth, getHeight());
        g2d.drawLine(2 * sectionWidth, 0, 2 * sectionWidth, getHeight());

        // Draw player areas in the left and right sections
        int playerBoxWidth = sectionWidth - 20;
        int playerBoxHeight = (getHeight() - 40) / 2;
        int playerXLeft = 10;
        int playerXRight = 2 * sectionWidth + 10;
        int playerY = 10;

        for (int i = 0; i < 2; i++) {
            drawPlayerArea(g2d, playerXLeft, playerY + i * (playerBoxHeight + 20), playerBoxWidth, playerBoxHeight, i + 1);
            drawPlayerArea(g2d, playerXRight, playerY + i * (playerBoxHeight + 20), playerBoxWidth, playerBoxHeight, i + 3);
        }

        // Leave space at the top of the middle section
        int middleTopSpace = 100;

        // Draw the patreons above the grid
        int patronWidth = 115;
        int patronHeight = 140;
        int patronSpacing = 10;
        int patronX = sectionWidth + (sectionWidth - (5 * patronWidth + 4 * patronSpacing)) / 2;
        int patronY = middleTopSpace;

        for (int i = 0; i < 5; i++) {
            BufferedImage patron = patreons[i];
            g2d.drawImage(patron, patronX + i * (patronWidth + patronSpacing), patronY, patronWidth, patronHeight, this);
        }

        // Draw the 4x3 grid of cards in the middle section
        int cardWidth = 115;
        int cardHeight = 140;
        int cardSpacing = 10;
        int gridX = sectionWidth + (sectionWidth - (3 * cardWidth + 2 * cardSpacing)) / 2;
        int gridY = patronY + patronHeight + 10;

        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 4; col++) {
                BufferedImage card = blackCards[(row * 4 + col) % blackCards.length];
                g2d.drawImage(card, gridX + col * (cardWidth + cardSpacing), gridY + row * (cardHeight + cardSpacing), cardWidth, cardHeight, this);
            }
        }

        // Draw the larger decks to the left of the grid
        int deckWidth = cardWidth;
        int deckHeight = cardHeight;
        int deckSpacing = 10;
        int deckX = gridX - deckWidth - deckSpacing;
        int deckY = gridY;

        g2d.drawImage(level3Card, deckX, deckY, deckWidth, deckHeight, this);
        g2d.drawImage(level2Card, deckX, deckY + deckHeight + deckSpacing, deckWidth, deckHeight, this);
        g2d.drawImage(level1Card, deckX, deckY + 2 * (deckHeight + deckSpacing), deckWidth, deckHeight, this);

        // Draw the green line below all elements in the middle section
        int greenLineY = 800;
        g2d.setColor(Color.GREEN);
        g2d.drawLine(sectionWidth, greenLineY, 2 * sectionWidth, greenLineY);

        // Draw gems below the green line in the middle section
        int gemSize = 95;
        int gemSpacing = 10;
        int gemY = greenLineY + 10;
        int gemX = sectionWidth + (sectionWidth - (6 * gemSize + 5 * gemSpacing)) / 2;
        g2d.drawImage(blackGem, gemX, gemY, gemSize, gemSize, this);
        g2d.drawImage(blueGem, gemX + (gemSize + gemSpacing), gemY, gemSize, gemSize, this);
        g2d.drawImage(redGem, gemX + 2 * (gemSize + gemSpacing), gemY, gemSize, gemSize, this);
        g2d.drawImage(greenGem, gemX + 3 * (gemSize + gemSpacing), gemY, gemSize, gemSize, this);
        g2d.drawImage(whiteGem, gemX + 4 * (gemSize + gemSpacing), gemY, gemSize, gemSize, this);
        g2d.drawImage(reserveGem, gemX + 5 * (gemSize + gemSpacing), gemY, gemSize, gemSize, this);
    }

    private void drawPlayerArea(Graphics2D g2d, int x, int y, int width, int height, int playerNum) {
        g2d.setColor(Color.WHITE);
        g2d.fillRect(x, y, width, height);
        g2d.setColor(Color.BLACK);
        g2d.drawRect(x, y, width, height);

        // Center player title
        g2d.setFont(new Font("Arial", Font.BOLD, 18));
        FontMetrics fm = g2d.getFontMetrics();
        int titleWidth = fm.stringWidth("Player " + playerNum);
        g2d.drawString("Player " + playerNum, x + (width - titleWidth) / 2, y + 20);

        // Draw smaller gem boxes inside the player area
        int gemBoxWidth = width - 20;
        int gemBoxHeight = height / 8;
        int gemBoxX = x + 10;
        int gemBoxY = y + 40;

        g2d.setColor(Color.WHITE);
        g2d.fillRect(gemBoxX, gemBoxY, gemBoxWidth, gemBoxHeight);
        g2d.setColor(Color.BLACK);
        g2d.drawRect(gemBoxX, gemBoxY, gemBoxWidth, gemBoxHeight);

        // Draw player gems inside the gem boxes
        int gemSize = 50; // Bigger gems
        int gemSpacing = 40; // More space between each gem
        int playerGemX = gemBoxX + 10;
        int playerGemY = gemBoxY + (gemBoxHeight - gemSize) / 2;
        g2d.drawImage(blackGem, playerGemX, playerGemY, gemSize, gemSize, this);
        g2d.drawImage(blueGem, playerGemX + (gemSize + gemSpacing), playerGemY, gemSize, gemSize, this);
        g2d.drawImage(redGem, playerGemX + 2 * (gemSize + gemSpacing), playerGemY, gemSize, gemSize, this);
        g2d.drawImage(greenGem, playerGemX + 3 * (gemSize + gemSpacing), playerGemY, gemSize, gemSize, this);
        g2d.drawImage(whiteGem, playerGemX + 4 * (gemSize + gemSpacing), playerGemY, gemSize, gemSize, this);
        g2d.drawImage(reserveGem, playerGemX + 5 * (gemSize + gemSpacing), playerGemY, gemSize, gemSize, this);

        // Draw single, smaller tempCard image inside player box, aligned to the left
        int tempCardWidth = 60; // Same size as a standard card
        int tempCardHeight = 100;
        int tempCardX = gemBoxX + 10;
        int tempCardY = gemBoxY + gemBoxHeight + 10;
        g2d.drawImage(tempCard, tempCardX, tempCardY, tempCardWidth, tempCardHeight, this);
    }


    @Override
    public void mouseClicked(MouseEvent e) {}
    public void mouseReleased(MouseEvent e) {}
    public void mousePressed(MouseEvent e) {}
    public void mouseEntered(MouseEvent e) {}
    public void mouseExited(MouseEvent e) {}

}
