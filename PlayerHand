import java.util.*;
import static java.lang.System.*;
import java.awt.image.BufferedImage;

class PlayerHand
{
  private int totalChips;
  private TreeMap<String, Integer> chips;
  private TreeMap<String, ArrayList<BufferedImage>> cards;
  private ArrayList<Card> reserved = new ArrayList<Card>();
  private ArrayList<Patron> patrons = new ArrayList<Patron>();
  private boolean showDeck = true;
  private int numBlack = 0;
  private int numBlue = 0;
  private int numRed = 0;
  private int numGreen = 0;
  private int numWhite = 0;
  private int points = 0;

  public PlayerHand()
  {
    totalChips = 0;
    chips = new TreeMap<String, Integer>();
    cards = new TreeMap<String, ArrayList<BufferedImage>>();
    chips.put("black", 0);
    chips.put("blue", 0);
    chips.put("red", 0);
    chips.put("green", 0);
    chips.put("white", 0);
    chips.put("yellow", 0);
  }
  
  public ArrayList<Card> getReserves()
  {
	  return reserved;
  }

  public boolean getShowDeck()
  {
	  return showDeck;
  }
  
  public void setShowDeck(boolean sd)
  {
	  showDeck = sd;
  }
  
  public int getTotalChips()
  {
    return totalChips;
  }
  
  public ArrayList<Patron> getPatrons()
  {
	  return patrons;
  }
  
  public TreeMap<String, ArrayList<BufferedImage>> getCards(){
	  return cards;
  }
  
  public void addReserve(Card card)
  {
	  reserved.add(card);
  }
  
  public boolean canAffordPatron(Patron patron)
  {
	  boolean black = false;
	  boolean blue = false;
	  boolean red = false;
	  boolean green = false;
	  boolean white = false;
	  TreeMap<String, Integer> cost = patron.getCost();
	  if((cost.containsKey("red") && numRed >= cost.get("red")) || !cost.containsKey("red"))
		  red = true;
	  if((cost.containsKey("black") && numBlack >= cost.get("black")) || !cost.containsKey("black"))
		  black = true;
	  if((cost.containsKey("blue") && numBlue >= cost.get("blue")) || !cost.containsKey("blue"))
		  blue = true;
	  if((cost.containsKey("green") && numGreen >= cost.get("green")) || !cost.containsKey("green"))
		  green = true;
	  if((cost.containsKey("white") && numWhite >= cost.get("white")) || !cost.containsKey("white"))
		  white = true;
	  if(red && blue && black && green && white)
		  return true;
	  else
		  return false;
	  
  }
  
  public void buyPatron(Patron patron)
  {
	  points += 3;
	  patrons.add(patron);
  }
  
  public void removeReserve(Card card)
  {
	  reserved.remove(card);
  }
  
  public void addCard(String color,BufferedImage image)
  {
	  ArrayList<BufferedImage> temp = new ArrayList<>();
	  temp.add(image);
	 
	  if(color.equals("red")) {
		  if( cards.get("red") == null )
		  {
			  cards.put("red", temp);
		  }
		  else
		  {
			  ArrayList<BufferedImage> arr = cards.get("red");
			  arr.add(image);
			  cards.put(color,arr);
		  }

		  numRed++;

	  }
	  else if(color.equals("black")) {
		  if( cards.get("black") == null )
		  {
			  cards.put("black", temp);
		  }
		  else
		  {
			  ArrayList<BufferedImage> arr = cards.get("black");
			  arr.add(image);
			  cards.put(color,arr);
		  }
		  numBlack++;
  	  }
	  else if(color.equals("blue")){
		  if( cards.get("blue") == null )
		  {
			  cards.put("blue", temp);
		  }
		  else
		  {
			  ArrayList<BufferedImage> arr = cards.get("blue");
			  arr.add(image);
			  cards.put(color,arr);
		  }
		  numBlue++;
  	  }
	  else if(color.equals("green")) {
		  if( cards.get("green") == null )
		  {
			  cards.put("green", temp);
		  }
		  else
		  {
			  ArrayList<BufferedImage> arr = cards.get("green");
			  arr.add(image);
			  cards.put(color,arr);
		  }
		  numGreen++;
	  }
	  else if(color.equals("white")) {
		  if( cards.get("white") == null )
		  {
			  
			  cards.put("white", temp);
		  }
		  else
		  {
			  ArrayList<BufferedImage> arr = cards.get("white");
			  arr.add(image);
			  cards.put(color,arr);
		  }
			  numWhite++;
		  }
  }
  
  public int getNumCard(String color)
  {
	  if(color.equals("red"))
		  return numRed;
	  else if(color.equals("black"))
		  return numBlack;
	  else if(color.equals("blue"))
		  return numBlue;
	  else if(color.equals("green"))
		  return numGreen;
	  else if(color.equals("white"))
		  return numWhite;
	  return -1;
  }
  
  public void addChip(String color)
  {
	  chips.put(color, chips.get(color) + 1);
  }
  
  public int getChip(String color)
  {
	  return chips.get(color);
  }
  public TreeMap<String, Integer> getChipsMap()
  {
	  return chips;
  }
  public int getPoints()
  {
	  return points;
  }
  public void buyCard(Card card)
  {
	  if(card.getCost().containsKey("black") && (chips.get("black") + numBlack) - card.getCost().get("black") >= 0)
	  {
			  chips.put("black", chips.get("black") - (card.getCost().get("black") - numBlack));
	  }
	  if(card.getCost().containsKey("blue") && (chips.get("blue") + numBlue) - card.getCost().get("blue") >= 0)
	  {
			  chips.put("blue", chips.get("blue") - (card.getCost().get("blue") - numBlue));
	  }
	  if(card.getCost().containsKey("red") && (chips.get("red") + numRed) - card.getCost().get("red") >= 0)
	  {
			  chips.put("red", chips.get("red") - (card.getCost().get("red") - numRed));
	  }
	  if(card.getCost().containsKey("green") && (chips.get("green") + numGreen) - card.getCost().get("green") >= 0)
	  {
			  chips.put("green", chips.get("green") - (card.getCost().get("green") - numGreen));
	  }
	  if(card.getCost().containsKey("white") && (chips.get("white") + numWhite) - card.getCost().get("white") >= 0)
	  {
			  chips.put("white", chips.get("white") - (card.getCost().get("white") - numWhite));
	  }
	  if(card.canAfford(this) && card.wildNeeded(this))
	  {
		  TreeMap<String, Integer> wilds = card.whichType(this);
		  if(wilds.containsKey("black"))
		  {
			  chips.put("black", 0);
			  chips.put("yellow", chips.get("yellow") - wilds.get("black"));
		  }
		  if(wilds.containsKey("blue"))
		  {
			  chips.put("blue", 0);
			  chips.put("yellow", chips.get("yellow") - wilds.get("blue"));
		  }
		  if(wilds.containsKey("red"))
		  {
			  chips.put("red", 0);
			  chips.put("yellow", chips.get("yellow") - wilds.get("red"));
		  }
		  if(wilds.containsKey("green"))
		  {
			  chips.put("green", 0);
			  chips.put("yellow", chips.get("yellow") - wilds.get("green"));
		  }
		  if(wilds.containsKey("white"))
		  {
			  chips.put("white", 0);
			  chips.put("yellow", chips.get("yellow") - wilds.get("white"));
		  }
	  }
	  addCard(card.getType(), card.getImage());
	  out.println("IT BOUGHT THE CARD");
	  out.println("IT BOUGHT THE CARD");
	  out.println("IT BOUGHT THE CARD");
	  
	  points += card.getValue();
  }

}
